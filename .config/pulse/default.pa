# This startup script is used only if PulseAudio is started per-user
# (i.e. not in system mode)

.nofail

### Load something into the sample cache
#load-sample-lazy x11-bell /usr/share/sounds/gtk-events/activate.wav
#load-sample-lazy pulse-hotplug /usr/share/sounds/startup3.wav
#load-sample-lazy pulse-coldplug /usr/share/sounds/startup3.wav
#load-sample-lazy pulse-access /usr/share/sounds/generic.wav

.fail

# allow volume to be set via multimedia keys
.ifexists module-mmkbd-evdev.so
# volume_limit is uint32_t, with 1.0 corresponding to 2^16
load-module module-mmkbd-evdev device=/dev/input/by-id/usb-Logitech_USB_Receiver-if02-event-kbd sink=alsa_output.pci-0000_01_07.0.analog-stereo volume_limit=65536
# load-module module-mmkbd-evdev device=/dev/input/by-id/usb-Logitech_USB_Receiver-event-mouse sink=alsa_output.pci-0000_01_07.0.analog-stereo
.endif

### Automatically augment property information from .desktop files
### stored in /usr/share/application
load-module module-augment-properties

### Load audio drivers statically
### (it's probably better to not load these drivers manually, but instead
### use module-udev-detect -- see below -- for doing this automatically)
# load-module module-alsa-sink device=hw:0 sink_name="out_phase22"
# set-default-sink out_phase22
# load-module module-alsa-source device=hw:0 source_name="in_phase22"
# set-default-source in_phase22
# load-module module-alsa-sink device=hw:1 sink_name="out_HDA_Nvidia"
# load-module module-alsa-source device=hw:1 source_name="in_HDA_Nvidia"
#load-module module-null-sink
#load-module module-pipe-sink

### Automatically load driver modules depending on the hardware available
.ifexists module-udev-detect.so
load-module module-udev-detect
.else
### Use the static hardware detection module (for systems that lack udev/hal support)
# load-module module-detect
# .endif

### Automatically restore the default sink/source when changed by the user
### during runtime
### NOTE: This should be loaded as early as possible so that subsequent modules
### that look up the default sink/source get the right value
load-module module-default-device-restore

### Automatically connect sink and source if JACK server is present
.ifexists module-jackdbus-detect.so
.nofail
load-module module-jackdbus-detect
.fail
.endif

### Load several protocols
.ifexists module-esound-protocol-unix.so
load-module module-esound-protocol-unix
.endif
# auth-anonymous required due to mismatch in 32bit/64bit pulseaudio libs?
load-module module-native-protocol-unix auth-anonymous=1 auth-group=pulse-access

### Network access (may be configured with paprefs, so leave this commented
### here if you plan to use paprefs)
#load-module module-esound-protocol-tcp
load-module module-native-protocol-tcp listen=0.0.0.0 auth-ip-acl=::1;172.16.0.0/24;192.168.178.0/24;2001:470:d138:d909::0/64

# .ifexists module-zeroconf-publish.so
# load-module module-zeroconf-publish
# .endif

# activate acoustic echo cancellation, with both soundcards as outputs, but only
# with the microphone of the built-in sound-card
# .ifexists module-echo-cancel.so
# load-module module-echo-cancel sink_master=alsa_output.pci-0000_00_06.1.analog-stereo source_master=alsa_input.pci-0000_00_06.1.analog-stereo
# load-module module-echo-cancel sink_master=alsa_output.pci-0000_01_07.0.analog-stereo source_master=alsa_input.pci-0000_00_06.1.analog-stereo
# .endif

# create a loopback sink, to be able to monitor a sound cards input
.ifexists module-loopback.so
load-module module-loopback sink=alsa_output.pci-0000_01_07.0.analog-stereo source=alsa_input.pci-0000_01_07.0.analog-stereo
.endif

### Load the RTP receiver module (also configured via paprefs, see above)
#load-module module-rtp-recv

### Load the RTP sender module (also configured via paprefs, see above)
#load-module module-null-sink sink_name=rtp format=s16be channels=2 rate=44100 sink_properties="device.description='RTP Multicast Sink'"
#load-module module-rtp-send source=rtp.monitor

### Load additional modules from GConf settings. This can be configured with the paprefs tool.
### Please keep in mind that the modules configured by paprefs might conflict with manually
### loaded modules.
.ifexists module-gconf.so
.nofail
load-module module-gconf
.fail
.endif

### Automatically restore the volume of streams and devices
load-module module-device-restore
load-module module-stream-restore
load-module module-card-restore

### Automatically move streams to the default sink if the sink they are
### connected to dies, similar for sources
load-module module-rescue-streams

### Make sure we always have a sink around, even if it is a null sink.
load-module module-always-sink

### Honour intended role device property
load-module module-intended-roles

### Automatically suspend sinks/sources that become idle for too long
load-module module-suspend-on-idle

### If autoexit on idle is enabled we want to make sure we only quit
### when no local session needs us anymore.
.ifexists module-systemd-login.so
load-module module-systemd-login
.endif

### Enable positioned event sounds
load-module module-position-event-sounds

### Cork music streams when a phone stream is active
# load-module module-cork-music-on-phone

### Modules to allow autoloading of filters (such as echo cancellation)
### on demand. module-filter-heuristics tries to determine what filters
### make sense, and module-filter-apply does the heavy-lifting of
### loading modules and rerouting streams.
load-module module-filter-heuristics
load-module module-filter-apply

### Load DBus protocol
.ifexists module-dbus-protocol.so
load-module module-dbus-protocol
.endif

# X11 modules should not be started from default.pa so that one daemon
# can be shared by multiple sessions.

### Load X11 bell module
#load-module module-x11-bell sample=bell-windowing-system

### Register ourselves in the X11 session manager
#load-module module-x11-xsmp

### Publish connection data in the X11 root window
#.ifexists module-x11-publish.so
#.nofail
#load-module module-x11-publish
#.fail
#.endif

### Make some devices default
#set-default-sink output
#set-default-source input
